@page "/MoneyAccountDetail/{AccountID}"
@using DLPMoneyTracker.Data.TransactionModels;
@using DLPMoneyTracker.Data.ConfigModels;

@inject MoneyAccountDetailVM viewModel

<div class="row">
    <div class="col-12">
        <h1>ACCOUNT: @viewModel.AccountDesc</h1>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <table>
            <thead>
                <tr>
                    <th>Transaction Date</th>
                    <th>Category</th>
                    <th>Description</th>
                    <th>Amount</th>
                </tr>
            </thead>

            <tbody>
                @if (viewModel.Transactions?.Count > 0)
                {
                    int rowCount = 0;
                    foreach (var money in viewModel.Transactions)
                    {
                        rowCount++;
                        
                        <tr style="@string.Format("background-color: {0};", (rowCount % 2 == 0) ? "lightyellow" : "white")">
                            <td>@money.TransDate</td>
                            <td>
                                
                                <div style="@RectangleStyle(money.CategoryUID)" ></div> 
                                @GetCategoryName(money.CategoryUID)
                                
                            </td>
                            <td>@money.Description</td>
                            <td>@string.Format("{0:c}", money.TransAmount)</td>
                        </tr>                            
                                                    
                    }
                }
            </tbody>

        </table>
    </div>
</div>


@code {
    private string _id;

    [Parameter]
    public string AccountID
    {
        get { return _id; }   
        set
        {
            _id = value;
            viewModel.LoadAccount(_id);
            StateHasChanged();
        }
    }


    public void Refresh()
    {
        viewModel.Refresh();
        StateHasChanged();
    }

    private string GetCategoryName(Guid uid)
    {
        var category = viewModel.GetCategory(uid);
        return category?.Name ?? "*MISSING*";
    }

    private string RectangleStyle(Guid catId)
    {
        string color;
        var category = viewModel.GetCategory(catId);

        switch(category.CategoryType)
        {
            case CategoryType.Expense:
                color = "red";
                break;
            case CategoryType.Income:
                color = "green";
                break;
            case CategoryType.Payment: // Debt Payment
                color = "orange";
                break;
            case CategoryType.TransferFrom:
                color = "red";
                break;
            case CategoryType.TransferTo:
                color = "green";
                break;
            case CategoryType.UntrackedAdjustment:
                color = "blue";
                break;
            default:
                color = "black";
                break;

        }

        return string.Format("float: left; margin-right: 5px; width: 10px; height: 10px; background-color: {0};", color);
    }

}
