@using DLPMoneyTracker.Data.ConfigModels;

@inject EditCategoryService service;

<section id="uiEditCategory">
    <div class="modal @(ShowDialog ? "Show" : "")" tabindex="-1" role="dialog" style="display: @(ShowDialog ? "block;" : "none;")">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header" id="divHeader">
                    <h3 class="modal-title">Edit Category</h3>
                    <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="Close"></button>
                </div>

                <div class="modal-body" id="divEditCategory">
                    <EditForm EditContext="@_editContext" OnValidSubmit="@SaveChanges" OnInvalidSubmit="@CancelChanges">
                        <div class="row">
                            <div class="col-6">
                                <label class="formLabelHead">Category Name</label>
                            </div>
                            <div class="col-6">
                                <input id="txtCategoryName" type="text" @bind-value=_editCategory.Name />
                            </div>

                        </div>

                        <div class="row">
                            <div class="col-6">
                                <label class="formLabelHead">Category Type</label>
                            </div>
                            <div class="col-6">
                                <select class="" @onchange="CategoryTypeChanged">
                                    @if (_editCategory is null || _editCategory.CategoryType == CategoryType.NotSet)
                                    {
                                        <option value="@CategoryType.NotSet" selected disabled="disabled">*Choose Category Type*</option>
                                    }

                                    @if (_editCategory?.CategoryType == CategoryType.Expense)
                                    {
                                        <option value="@CategoryType.Expense" selected>Expense</option>
                                    }
                                    else
                                    {
                                        <option value="@CategoryType.Expense">Expense</option>
                                    }

                                    @if (_editCategory?.CategoryType == CategoryType.Income)
                                    {
                                        <option value="@CategoryType.Income" selected>Income</option>
                                    }
                                    else
                                    {
                                        <option value="@CategoryType.Income">Income</option>
                                    }

                                    @if (_editCategory?.CategoryType == CategoryType.UntrackedAdjustment)
                                    {
                                        <option value="@CategoryType.UntrackedAdjustment" selected>Adjustment</option>
                                    }
                                    else
                                    {
                                        <option value="@CategoryType.UntrackedAdjustment">Adjustment</option>
                                    }

                                </select>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-6">
                                <label class="formLabelHead">Monthly Budget</label>
                            </div>
                            <div class="col-6">
                                <input id="txtMonthly" type="text" @bind-value=_editCategory.DefaultMonthlyBudget />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-6">
                                <label class="formLabelHead">Exclude From Budget</label>
                            </div>
                            <div class="col-6">
                                <input id="chkExcludeBudget" type="checkbox" @bind-value=_editCategory.ExcludeFromBudget />
                            </div>
                        </div>

                    </EditForm>
                </div>

                <div class="modal-footer" id="divFooter">
                    <button class="btn btn-primary" type="button" @onclick="SaveChanges"> SAVE </button>
                    <button class="btn btn-secondary" type="button" @onclick="CancelChanges" data-dismiss="modal">CANCEL</button>
                </div>
            </div>
        </div>
    </div>
</section>

@if (ShowDialog)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    EditContext _editContext;
    TransactionCategory _editCategory;

    [Parameter]
    public TransactionCategory EditCategory
    {
        get { return _editCategory; }
        set
        {
            _editCategory = value;
        }
    }

    // NOTE: Change bool to TransactionCategory to return the data via the Event
    [Parameter]
    public EventCallback<bool> CloseEventCallback { get; set; }


    public bool ShowDialog { get; set; }


    protected override void OnInitialized()
    {
        if (_editCategory is null) _editCategory = new TransactionCategory();
        _editContext = new EditContext(_editCategory);
    }

    private void CategoryTypeChanged(ChangeEventArgs e)
    {
        var catType = e.Value.ToString().ToCategoryType();
        if (catType == CategoryType.NotSet) return;

        _editCategory.CategoryType = catType;
    }


    public void Show(TransactionCategory cat)
    {
        _editCategory = cat;
        ShowDialog = true;
        StateHasChanged();
    }

    public void Close()
    {
        ShowDialog = false;
        StateHasChanged();
    }

    protected async Task SaveChanges()
    {
        service.SaveCategory(_editCategory);
        await CloseEventCallback.InvokeAsync(true);
        Close();
    }

    protected async Task CancelChanges()
    {
        service.ReloadCategories();
        await CloseEventCallback.InvokeAsync(true);
        Close();
    }

}
