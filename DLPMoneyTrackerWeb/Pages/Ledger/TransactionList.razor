@page "/Ledger"
@using DLPMoneyTracker.Data.ConfigModels;

@inject FullLedgerVM viewModel

<section>
    <!-- Filter Controls -->
    <EditForm EditContext="@_editContext" OnValidSubmit="@Refresh">
        <div style="display: inline">
            <div class="row">
                

                    <div class="col-4">
                        <label>Date Range</label>
                        <input id="dateStart" type="date" @bind-value="_filter.StartDate" />
                        <label>To</label>
                        <input id="dateEnd" type="date" @bind-value="_filter.EndDate" />
                    </div>
                    <div class="col-3">
                        <label>Search Text</label>
                        <input id="txtFilter" type="text" @bind-value="_filter.SearchText" />
                    </div>
                    <div class="col-1">
                        <button type="submit"><img class="action-btn" src="icons\Light-Bulb-256.png" /></button>
                    </div>
                
            </div>
        </div>
    </EditForm>

    <!-- Grid data-->
    <div class="row">
        <div class="col-12">
            <table>
                <thead>
                    <tr>
                        <th>Transaction Date</th>
                        <th>Account</th>
                        <th>Category</th>
                        <th>Description</th>
                        <th>Amount</th>
                    </tr>
                </thead>

                <tbody>
                    @if (viewModel.Transactions?.Count > 0)
                    {
                        int rowCount = 0;
                        foreach (var money in viewModel.Transactions)
                        {
                            rowCount++;

                            <tr class="@((rowCount % 2 == 0) ? "altRowColor" : "stdRowColor")">
                                <td>@money.TransDate</td>
                                <td>@GetAccountName(money.AccountID)</td>
                                <td>

                                    <div style="@RectangleStyle(money.CategoryUID)"></div>
                                    @GetCategoryName(money.CategoryUID)

                                </td>
                                <td>@money.Description</td>
                                <td>@string.Format("{0:c}", money.TransAmount)</td>
                            </tr>

                        }
                    }
                </tbody>

            </table>
        </div>
    </div>
</section>

@code {
    private LedgerFilter _filter;
    private EditContext _editContext;


    protected override void OnInitialized()
    {
        _filter = new LedgerFilter();
        _editContext = new EditContext(_filter);
        this.Refresh();
    }


    public void Refresh()
    {
        viewModel.Refresh(_filter);
        StateHasChanged();
    }

    private string GetAccountName(string id)
    {
        var acct = viewModel.GetAccount(id);
        return acct?.Description ?? "*MISSING*";
    }

    private string GetCategoryName(Guid uid)
    {
        var category = viewModel.GetCategory(uid);
        return category?.Name ?? "*MISSING*";
    }

    private string RectangleStyle(Guid catId)
    {
        string color;
        var category = viewModel.GetCategory(catId);

        switch (category.CategoryType)
        {
            case CategoryType.Expense:
                color = "red";
                break;
            case CategoryType.Income:
                color = "green";
                break;
            case CategoryType.Payment: // Debt Payment
                color = "orange";
                break;
            case CategoryType.TransferFrom:
                color = "red";
                break;
            case CategoryType.TransferTo:
                color = "green";
                break;
            case CategoryType.UntrackedAdjustment:
                color = "blue";
                break;
            default:
                color = "black";
                break;

        }

        return string.Format("float: left; margin-right: 5px; width: 10px; height: 10px; background-color: {0};", color);
    }
}